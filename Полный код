#include <iostream>
#include <iomanip>
#include <string>
#include <Windows.h>


using namespace std;

/*
		Данные о издателе:
		ФИО
		Данные о книге:
		id книги
		Название книги
		Год выпуска
		Данные о магазине:
		Название магазина
		Пометка о наличие
		Количестов проданных книг
*/

struct Name {
	string surname, fisrtName, middleName;
};

struct Book {
	int id; // Уникальное поле. Ключ. 
	string nameBook, yearIssue;

};

struct Shop {
	string nameShop;
	char presence;
	int number;
};

class Data {
private:
	Name name;
	Book book;
	Shop shop;
public:
	Data();
	Data(Name name_, Book book_, Shop shop_);
	~Data();
    Name getName() { return name; }
    Book getBook() { return book; }
    Shop getShop() { return shop; }
    void setShop(char presense_) {
        shop.presence = presense_;
    }
    //Прототипы функций
	void Show();
	void EnterDataForMassive(Name name_, Book book_, Shop shop_);
    void EnterData(Data*& massiveObjects, int& number); //Ввод начальных данных
    void Print(Data* massiveObjects, int number); // Вывод записей
    void AddData(Data*& massiveObjects, int& number);// Добавляет записи к уже существуюшим
    void DeleteData(Data*& massiveObjects, int& number); // Удаляет все данные о книги по id 
    void SortingData(Data*& massiveObjects, int& number); //Сортировка по количеству проданных книг
    void ShopList(Data*& massiveObjects, int& number); // Возвращает список магазинов, которые хранят хотя бы одну книгу издателя и также возвращает количество книг в каждом магазине определенного автора
    void Buy(Data*& massiveObjects, int& number);//Функция покупки 
};
Data::Data() {
    name.surname = " ";
    name.fisrtName = " ";
    name.middleName = " ";
    book.id = 0;
    book.nameBook = " ";
    book.yearIssue = " ";

    shop.nameShop = " ";
    shop.presence = ' ';
    shop.number = 0;
} // Конструктор без параметром

Data::Data(Name name_, Book book_, Shop shop_) {
    name.surname = name_.surname;
    name.fisrtName = name_.fisrtName;
    name.middleName = name_.middleName;
    book.id = book_.id;
    book.nameBook = book_.nameBook;
    book.yearIssue = book_.yearIssue;

    shop.nameShop = shop_.nameShop;
    shop.presence = shop_.presence;
    shop.number = shop_.number;
}// Коснруктор с параметрами

Data::~Data() {} // Деструктор

void Data::Show() {
    cout << "| Издатель: " << name.fisrtName << " " << name.surname[0] << "." << " " << name.middleName[0] << "." << endl;
    cout << "| id книги - " << book.id << " | Название книги: " << book.nameBook << " | Год выпуска: " << book.yearIssue << endl;
    cout << "| Название магазина: " << shop.nameShop << " | Информация о наличии: " << shop.presence << " | Количество проданных книг: " << shop.number << endl;
} //Вывод данных

void Data::EnterDataForMassive(Name name_, Book book_, Shop shop_) { // Ввод данных в массив объектов
    name.fisrtName = name_.fisrtName;
    name.surname = name_.surname;
    name.middleName = name_.middleName;

    book.id = book_.id;
    book.nameBook = book_.nameBook;
    book.yearIssue = book_.yearIssue;

    shop.nameShop = shop_.nameShop;
    shop.presence = shop_.presence;
    shop.number = shop_.number;
}

void EnterData(Data*& massiveObjects, int& number) { // Ввод начальных данных

	//Переменые для записи
	Name name;
	Book book;
	Shop shop;

	massiveObjects = new Data[number];

	for (int i = 0; i < number; i++) {
		cout << "Введите Фамилию: ";
		cin >> name.fisrtName;
		cout << "Введите имя: ";
		cin >> name.surname;
		cout << "Введите отчество: ";
		cin >> name.middleName;
		cout << "Введите id книги - ";
		cin >> book.id;
		cout << "Введите название книги: ";
		cin.ignore();
		getline(cin, book.nameBook);
		cout << "Введите год выпуска книги: ";
		cin >> book.yearIssue;
		cout << "Введите название магазина: ";
		cin.ignore();
		getline(cin, shop.nameShop);
		cout << "Введите информацию о наличие книги: ";
		cin >> shop.presence;
		cout << "Введити количество проданных книг: ";
		cin >> shop.number;
		// Добавляем данные для каждой структурной пременной класса Data в массив объектов
		massiveObjects[i].EnterDataForMassive(name, book, shop);

		cout << "--------------------------------------------------" << endl;
	}

} // Ввод данных
void Print(Data* massiveObjects, int number) { // Вывод данных
	for (int i = 0; i < number; i++) {
		cout << "Данные №" << i + 1 << endl;
		massiveObjects[i].Show();
		cout << "--------------------------------------------" << endl;
	}
} // Вывод данных
void AddData(Data*& massiveObjects, int& number) { // Добавляет запись
	cout << "Введите количество записей, которые требуется добавить: ";
	int newNumberMassive = 0; // Размер нового массива
	cin >> newNumberMassive;
	int oldNumberMassive = number;// Размер старого массива
	number = number + newNumberMassive;
	Data* massiveObjectsTime = new Data[oldNumberMassive];// создание временного массива
	for (int i = 0; i < oldNumberMassive; i++) { // Переносим данные во временный массив
		massiveObjectsTime[i] = massiveObjects[i];
	}
	massiveObjects = new Data[number]; // Создаем пустой массив с обновленным размером
	for (int i = 0; i < oldNumberMassive; i++) {
		massiveObjects[i] = massiveObjectsTime[i]; // Переписываем данные из временного масива в основной массив
	}
	//Переменые для записи
	Name name;
	Book book;
	Shop shop;
	for (int i = oldNumberMassive; i < number; i++) {
		cout << "Введите Фамилию: ";
		cin >> name.fisrtName;
		cout << "Введите имя: ";
		cin >> name.surname;
		cout << "Введите отчество: ";
		cin >> name.middleName;
		cout << "Введите id книги: ";
		cin >> book.id;
		cout << "Введите название книги: ";
		cin.ignore();
		getline(cin, book.nameBook);
		cout << "Введите год выпуска книги: ";
		cin >> book.yearIssue;
		cout << "Введите название магазина: ";
		cin.ignore();
		getline(cin, shop.nameShop);
		cout << "Введите информацию о наличие книги: ";
		cin >> shop.presence;
		cout << "Введити количество проданных книг: ";
		cin >> shop.number;
		// Добавляем данные для каждой структурной пременной класса Data в массив объектов
		massiveObjects[i].EnterDataForMassive(name, book, shop);
		cout << "--------------------------------------------------" << endl;

	}

}
void DeleteData(Data*& massiveObjects, int& number) { // Удаляет данные из базы по id
	int id; // Переменная, которая содержит фамилию автора
	Data Object; // Объект класса, куда будем записывать даныне из массива объктов для перестановки
	cout << "Ведите id книги для того, чтобы удалить все данные о ней из базы " << endl;
	cin >> id; // Вводим фамилию автора				Пример: M[1,2,3,4,5] - Нам надо удалить элемент 3
	for (int i = 0; i < number; i++) { // Осуществляем перебор массива объектов	
		if (massiveObjects[i].getBook().id == id) { // Если введенная фамилия существует	
			massiveObjects[i] = massiveObjects[number - 1]; // M[1,2,5,4,5] // На место найденного объекта ставим послдений элемент массива
			massiveObjects[number--]; // M[1,2,5,4] Удаляем последний элемент
			Object = massiveObjects[i]; // Object = 5;
			massiveObjects[i] = massiveObjects[number - 1]; // M[1, 2, 4, 4]
			massiveObjects[number - 1] = Object; // M[1, 2, 4, 5] // Все это нужно для того, чтобы было соблюление порядка
		}
	}
}
void SortingData(Data*& massiveObjects, int& number) { // Сортировка методом "Прямой выбор"
	Data object;
	for (int i = 1; i < number; i++) {
		for (int j = 0; j < number; j++) {
			if (massiveObjects[j].getShop().number > massiveObjects[i].getShop().number) {
				object = massiveObjects[j];
				massiveObjects[j] = massiveObjects[i];
				massiveObjects[i] = object;
			}
		}
	}
}
void ShopList(Data*& massiveObjects, int& number) { // Функция предназначена для того, чтобы посмотреть в каких магазигах есть книга одного Автора(по фамилии) и в каком количестве.
	string autor;
	int count = 0; // Переменная для посчета количества книг одного автора для каждого магазина
	string* dataShop = new string[number]; // Массив, куда передаются значения "Название магазина" определенного автора
	string* dataNumberForShop = new string[number]; // Массив куда передаются значения "количество книг" для определенного автора каждого магазина
	int index = 0; // количество добавившихся элементов. Использовался как число, которое определяет размер массива

	cout << "Введите фамилию Автора, чтобы узнать в каких магазинах есть его книга" << endl;
	cin >> autor;
	for (int i = 0; i < number; i++) { // Для начала через цикл for прогоняем и добавляем те элементы, в условиях которых содержится фамилия издателя.
		if (autor == massiveObjects[i].getName().fisrtName && massiveObjects[i].getShop().presence == '+') { // Если Фамилия по выборке совпадает с фамилией в базе данных и книга есть в наличие, то добавляем в массив строк название магазинов, в котром есть книга автора
			dataShop[index] = massiveObjects[i].getShop().nameShop;
			index++;
		}
	}
	for (int i = 0; i < index; i++) { // После массив из повторяющихся элементов прогоняем по двум циклам и добовляем на место повторяющегося элемента пустой символ - " "; 
		for (int m = i + 1; m < index; m++) {
			if (dataShop[i] == dataShop[m]) {
				dataShop[i] = " "; 	// Добавление пустого элемента на место повторяюшегося элемента.
			}
		}
	}
	if (dataShop->empty()) {
		cout << "Ни в одном магазине нет книги Автора - " << autor << endl;
	}
	else {
		cout << "Книга автора - " << autor << " находится в таких магазинах как: " << endl; // Дальше, исключая пустое значение " ", выводим уникальные значения.
		for (int i = 0; i < index; i++) {
			if (dataShop[i] != " ") {
				cout << "| Магазин - " << dataShop[i] << " |";
				for (int j = 0; j < number; j++) {
					if (dataShop[i] == massiveObjects[j].getShop().nameShop && massiveObjects[j].getName().fisrtName == autor) {
						count++;
						dataNumberForShop[i] = to_string(count);
					}
				}
				count = 0;
				cout << " | В количестве - " << setw(5) << dataNumberForShop[i] << " |" << endl;
			}
		}
	}
}
void Buy(Data*& massiveObjects, int& number)
{
	string nameAutor;
	string nameBook1;
	int numberBook;
	int count = 0;
	cout << "Введите фамилию Автора, название книги и укажите в каком количестве вы желаете приобрести книги " << endl;
	cout << "Введите фамилию: ";
	cin >> nameAutor;
	cout << "Введите название книги: ";
	cin.ignore();
	getline(cin, nameBook1);
	cout << "Введите количество: ";
	cin >> numberBook;
	Shop shop;

	for (int j = 0; j < number; j++) {
		if (massiveObjects[j].getName().fisrtName == nameAutor && massiveObjects[j].getBook().nameBook == nameBook1) {
			massiveObjects[j].setShop('-');
			count++;
			cout << "Count " << endl;
		}
		if (count == numberBook) {
			j = number;
		}
	}
	if (count != 0) {
		cout << "Книга куплена " << endl;
	}
	else {
		cout << "Не найдено совпадений по запросу: " << endl;
		cout << "Фамилия автора: " << nameAutor << endl;
		cout << "Название книги: " << nameBook1 << endl;
	}

}


int menu;

void Menu() {
	cout << "Меню управления: " << endl;
	cout << "(0) Выход из программы " << endl;
	cout << "(1) Ввод данных " << endl;
	cout << "(2) Вывод данных " << endl;
	cout << "(3) Добавление данных " << endl;
	cout << "(4) Удаление данных " << endl;
	cout << "(5) Сортировка данных " << endl;
	cout << "(6) Узнать в каких магазинах есть книга определенного Автора " << endl;
	cout << "(7) Купить книгу " << endl;

	cin >> menu;
}
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	int sizeGlobal = 0;
	Data* d = new Data[sizeGlobal];
	if (sizeGlobal == 0) {
		cout << "Введите размер базы данных(Массив данных) ";
		cin >> sizeGlobal;

		system("cls");
	}
	Menu();
	while (menu != 0) {
		switch (menu) {
		case 1:
			system("cls");
			EnterData(d, sizeGlobal);
			system("cls");
			Menu();
			break;

		case 2:
			system("cls");
			if (sizeGlobal != 0) {
				Print(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!" << endl;
			}
			system("pause");
			system("cls");
			Menu();
			break;

		case 3:
			system("cls");

			if (sizeGlobal != 0) {
				AddData(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!";
			}
			system("pause");
			system("cls");
			Menu();
			break;

		case 4:
			system("cls");

			if (sizeGlobal != 0) {
				DeleteData(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!";
			}
			system("pause");
			system("cls");
			Menu();
			break;

		case 5:
			system("cls");

			if (sizeGlobal != 0) {
				SortingData(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!";
			}
			system("pause");
			system("cls");
			Menu();
			break;

		case 6:
			system("cls");

			if (sizeGlobal != 0) {
				ShopList(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!";
			}
			system("pause");
			system("cls");
			Menu();
			break;
		case 7:
			system("cls");

			if (sizeGlobal != 0) {
				Buy(d, sizeGlobal);
			}
			else {
				cout << "Данные пусты!";
			}
			system("pause");
			system("cls");
			Menu();
			break;
		}
	}

}
